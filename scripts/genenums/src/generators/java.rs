use std::fs;
use std::fs::File;
use std::io::Write;

pub(crate) fn create_java_enum(name: &str, values: &[&str]) {
    use convert_case::{Case, Casing};

    let package = "com.dioxuslabs.taffy.enums";
    let enum_name = name.to_case(Case::Pascal);

    let auto_gen_comment = "/*
**********************************************************
**            AUTOGENERATED CLASSES FOR TAFFY           **
**  This code was automatically generated. Do not edit. **
**********************************************************
*/
";

    let mut result = format!(
        r"{}package {};

public enum {} {{
",
        auto_gen_comment, package, enum_name
    );

    for value in values.iter() {
        result.push_str("    ");
        result.push_str(&value.to_case(Case::UpperSnake));
        result.push_str(",\n");
    }

    // eliminate the last comma
    if !values.is_empty() {
        result.pop();
        result.pop();
        result.push('\n');
    }

    result.push_str("    ;\n");
    result.push('\n');

    result.push_str("    private final int ordinal;\n");

    result.push('\n');
    result.push_str("    ");
    result.push_str(enum_name.as_str());
    result.push_str("() {\n");
    result.push_str("        this.ordinal = ordinal();\n");
    result.push_str("    }\n");

    result.push_str("}\n");

    fs::create_dir_all("./bindings/java/java/src/main/java/com/dioxuslabs/taffy/enums/")
        .expect("Couldn't create directories");
    let file =
        File::create(format!("./bindings/java/java/src/main/java/com/dioxuslabs/taffy/enums/{}.java", enum_name));
    file.expect("Error: File not found").write_all(result.as_ref()).expect("Error: Couldn't write to file");
}
