use std::collections::HashMap;
use std::fs;
use std::fs::File;
use std::io::Write;

fn main() {
    let mut enums: HashMap<&str, Vec<&str>> = HashMap::new();
    enums.insert("Display", vec!["Block", "Flex", "Grid", "None"]);
    enums.insert("BoxGenerationMode", vec!["Normal", "None"]);
    enums.insert("Position", vec!["Relative", "Absolute"]);
    enums.insert("BoxSizing", vec!["BorderBox", "ContentBox"]);
    enums.insert("Overflow", vec!["Visible", "Clip", "Hidden", "Scroll"]);
    enums.insert("TextAlign", vec!["Auto", "LegacyLeft", "LegacyRight", "LegacyCenter"]);
    enums.insert("GridAutoFlow", vec!["Row", "Column", "RowDense", "ColumnDense"]);
    enums.insert("FlexWrap", vec!["NoWrap", "Wrap", "WrapReverse"]);
    enums.insert("FlexDirection", vec!["Row", "Column", "RowReverse", "ColumnReverse"]);
    enums.insert(
        "AlignContent",
        vec!["Start", "End", "FlexStart", "FlexEnd", "Center", "Stretch", "SpaceBetween", "SpaceEvenly", "SpaceAround"],
    );
    enums.insert("AlignItems", vec!["Start", "End", "FlexStart", "FlexEnd", "Center", "Baseline", "Stretch"]);

    for (key, value) in enums.into_iter() {
        create_enum(key, value);
    }
}

fn create_enum(name: &str, values: Vec<&str>) {
    create_java_enum(name, values);
}

fn create_java_enum(name: &str, values: Vec<&str>) {
    use convert_case::{Case, Casing};

    let package = "com.dioxuslabs.taffy.enums";
    let enum_name = name.to_case(Case::Pascal);

    let auto_gen_comment = "/*
**********************************************************
**            AUTOGENERATED CLASSES FOR TAFFY           **
**  This code was automatically generated. Do not edit. **
**********************************************************
*/\n";

    let mut result = format!("{}package {};\n\npublic enum {} {{\n", auto_gen_comment, package, enum_name);

    for value in values.iter() {
        result.push_str("    ");
        result.push_str(&value.to_case(Case::UpperSnake));
        result.push_str(",\n");
    }

    // eliminate the last comma
    if !values.is_empty() {
        result.pop();
        result.pop();
        result.push('\n');
    }

    result.push_str("    ;\n");
    result.push('\n');

    result.push_str("    private final int ordinal;\n");

    result.push('\n');
    result.push_str("    ");
    result.push_str(enum_name.as_str());
    result.push_str("() {\n");
    result.push_str("        this.ordinal = ordinal();\n");
    result.push_str("    }\n");

    result.push_str("}\n");

    fs::create_dir_all("./bindings/java/java/src/main/java/com/dioxuslabs/taffy/enums/")
        .expect("Couldn't create directories");
    let file =
        File::create(format!("./bindings/java/java/src/main/java/com/dioxuslabs/taffy/enums/{}.java", enum_name));
    file.expect("Error: File not found").write_all(result.as_ref()).expect("Error: Couldn't write to file");
}
